% EE-442 Wireless Receivers : algorithms and architectures
% Final Project : OFDM Audio Transmission System
% Last Modification : 08.12.23
% Authors : Palmisano Fabio, Riber Rafael

function [txsignal conf] = tx(txbits,conf,k, training_bits)
% Digital  for OFDM
%
%   [txsignal conf] = tx(txbits,conf,k) implements a complete transmitter
%   consisting of:
%       - modulator
%       - pulse shaping filter
%       - up converter
%   in digital domain.
%
%   txbits  : Information bits
%   conf    : Universal configuration structure
%   k       : Frame index
%
% Specifications : 
% - 256 Carriers, spacing of 5Hz
% - cycle prefix = N(symbol length) / 2

%% Generate the signal (as usual)
source = txbits;

%% Add Data Symbols
mappedQPSK = reshape(source, 2, []).'; % Group bits into pairs
dec_symbol = bi2de(mappedQPSK, 'left-msb'); % Convert binary to decimal
%qpsk_symbol = exp(1i * (pi/4) * (2 * dec_symbol - 1)); % QPSK constellation mapping
    
for j = 1:numel(dec_symbol)
       if dec_symbol(j) ==  0
           dec_symbol(j) = (-1 - 1i)/(sqrt(2));
       elseif dec_symbol(j)  == 1
           dec_symbol(j) = (-1 + 1i)/(sqrt(2));
       elseif dec_symbol(j) == 2 
           dec_symbol(j) = (1 - 1i)/(sqrt(2));
       else 
           dec_symbol(j) = (1 + 1i)/(sqrt(2));
       end
end 

qpsk_symbol = dec_symbol;



qpsk = reshape(qpsk_symbol, [conf.N, 10]);
data = [];
for ii = 1:size(qpsk,2)
    OFDM_QPSK_symbol = osifft(qpsk(:,ii), conf.os_factor);
    OFDM_QPSK_symbol_cp = [OFDM_QPSK_symbol(end - conf.CP + 1:end); OFDM_QPSK_symbol];
    data = [data ; OFDM_QPSK_symbol_cp];
end

txsignal_data = data / rms(data);
%txsignal_data = data / max(abs(data));

%% Add Preamble
preamble_bits = preamble_generate(conf.npreamble); % Preamble bits
preamble_symbols = 1 - 2*preamble_bits; % BPSK modulation
up_preamble = upsample(preamble_symbols,conf.os_factor); % upsampled preamble
rrc_filter = rrc(conf.os_factor,conf.RollOff, conf.filter_len);

%% Convolving the upsampled sequence with the pulse shape filter
preamble = conv(up_preamble, rrc_filter.','same');
%preamble = preamble / max(abs(preamble));
preamble = preamble / rms(preamble);


%% Add Training Symbols

training_symbols = 1 - 2*training_bits; % BPSK modulation
training_ofdm_symbol = osifft(training_symbols, conf.os_factor); % OFDM modulation
%test = training_ofdm_symbol((end-conf.CP+1):end);
training_cp = [training_ofdm_symbol(end-conf.CP+1:end); training_ofdm_symbol];

%txsignal_train = training_cp / max(abs(training_cp));
txsignal_train = training_cp / rms(training_cp);


txsignal = [preamble ; txsignal_train ; txsignal_data];

%% Plot
% figure;
% plot(real(txsignal_train));
% title('TX training Signal with CP, before upconversion');
% xlabel('Sample Index');
% ylabel('Amplitude');

figure;
plot(real([txsignal_train ; txsignal_data]));
xline(length(txsignal_train), 'b--')
xline(length(training_ofdm_symbol(end-conf.CP:end)), 'r--')
xline(length(txsignal_train) + length(txsignal_data), 'b--')
title('TX Signal, before upconversion (no preamble)');
xlabel('Sample Index');
ylabel('Amplitude');
legend('signal','end of training', 'end of CP', 'end of data')

%% Upconversion

%txsignal = real(txsignal);

t = 0:1/conf.f_s:(size(txsignal)-1)/conf.f_s;
tx_upconverted = cos(2*pi*conf.f_c*t').*real(txsignal)-sin(2*pi*conf.f_c*t').*imag(txsignal);

% 
% 
figure;
plot(tx_upconverted);
xline(length(preamble), 'g', 'LineWidth', 3);
xline(length(preamble) + length(txsignal_train), 'b', 'LineWidth', 3);
title('Transmitted Signal tx module');
xlabel('Sample Index');
ylabel('Amplitude');


txsignal = tx_upconverted;



%% TO ASK 
% - Size of the training 
% - 
